precision mediump float;
uniform vec3 uLightPosition;
uniform vec3 uEyePosition;
uniform bool uEnableLighting;
uniform bool uEnableTexture;
uniform bool uEnableShadowDepth;
uniform sampler2D uSampler;
uniform sampler2D uShadowDepthSampler;
varying vec4 vNormal;
varying vec4 vPosition;
varying vec4 vColor;
varying vec2 vTextureCoord;

/**
 * you get true if the point is in shadow
 */
bool
isInShadow(
    vec3 point);

/**
 * convert from vector to float
 */
float
vec4ToFloat(
    vec4 coord);

void main() {
    vec4 color;
    vec4 texColor;
    vec4 alphaColor;
    bvec4 maskVec;
    if (uEnableTexture) {
        texColor = texture2D(uSampler, vTextureCoord);
    } else {
        texColor = vec4(0.0, 0.0, 0.0, 0.0); 
    }
    // maskVec = greaterThan(texColor, vec4(0, 0, 0, 0));
    color = mix(vColor, texColor, texColor.a); 
    if (uEnableLighting) { 
        vec3 lightVec = uLightPosition - vPosition.xyz;
        vec3 viewDir = normalize(uEyePosition - vPosition.xyz);
        vec3 reflectDir = reflect(- lightVec, vNormal.xyz);
        float specular = pow(max(dot(viewDir, reflectDir), 0.0), 1.0) * 0.8;
        color = color * vec4(vec3(specular), 1.0);
    } 
    if (isInShadow) {
        color.rgba = 0.0; 
        color.b = 1.0;
    } 
    gl_FragColor = color;
}

/**
 * you get true if the point is in shadow
 */
bool
isInShadow(
    vec3 point,
    vec3 pointInShadow)
{
    vec4 shadowVec;
    float depth;
    shadowVec = texture2D(uShadowDepthSampler, pointInShadow.xy);
    depth = vec4ToFloat(shadowVec);
    return point.z > depth;
}

/**
 * convert from vector to float
 */
float
vec4ToFloat(
    vec4 coord)
{
    float result;
    result = 0.0;
    for (int i = 0; i < 4; i++) {
        float tmpVal = coord[i];
        tmpVal /= pow(float(0xff), i);
        result += tmpVal;
    } 
    return result;
}
// vi: se ts=4 sw=4 et:
