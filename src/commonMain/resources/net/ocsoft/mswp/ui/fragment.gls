precision mediump float;
uniform vec3 uLightPosition;
uniform vec3 uEyePosition;
uniform bool uEnableLighting;
uniform bool uEnableTexture;
uniform bool uEnableShadowDepth;
uniform sampler2D uSampler;
uniform sampler2D uShadowDepthSampler;
varying vec4 vNormal;
varying vec4 vPosition;
varying vec4 vShadowPosition;
varying vec4 vColor;
varying vec2 vTextureCoord;

/**
 * you get true if the point is in shadow
 */
bool
isInShadow(
    vec4 pointInShadow);

/**
 * read shadow depth
 */
float
readShadowDepth(
    vec4 pointInShadow);

/**
 * convert from vector to float
 */
float
vec4ToFloat(
    vec4 coord);

/**
 * float to vector4
 */
vec4
floatToVec4(
    float value);


void main() {
    vec4 color;
    vec4 texColor;
    vec4 alphaColor;
    bvec4 maskVec;
    if (uEnableTexture) {
        texColor = texture2D(uSampler, vTextureCoord);
    } else {
        texColor = vec4(0.0, 0.0, 0.0, 0.0); 
    }
    // maskVec = greaterThan(texColor, vec4(0, 0, 0, 0));
    color = mix(vColor, texColor, texColor.a); 
    if (uEnableLighting) { 
        vec3 lightVec = uLightPosition - vPosition.xyz;
        vec3 viewDir = normalize(uEyePosition - vPosition.xyz);
        vec3 reflectDir = reflect(- lightVec, vNormal.xyz);
        float specular = pow(max(dot(viewDir, reflectDir), 0.0), 1.0) * 0.8;
        color = color * vec4(vec3(specular), 1.0);
    }
    if (uEnableShadowDepth) {
        // float depth;
        // depth = readShadowDepth(vShadowPosition);
        // color = vec4(vec3(depth), 1);
        // color = vec4(vec3(vShadowPosition.z), 1.0);
        // if (vShadowPosition.z < depth) {
        //    float diff = depth - vShadowPosition.z;
        //    color = vec4(diff, 0, 0, 1.0);
        // } else {
        //    float diff = vShadowPosition.z - depth;
        //    color = vec4(0, diff, 0, 1.0);
        // }
        // color = vec4(vec3(gl_FragCoord.z), 1.0);
        if (isInShadow(vShadowPosition)) {
            // float depth;
            color *= vec4(0.5, 0.5, 0.5, 1.0);
            // depth = readShadowDepth(vShadowPosition);
            // color = vec4(vec3(depth), 1.0); 
            // color = vec4(vec3(vPosition.z * 0.5 + 0.5), 1.0); 
        }
    }
    gl_FragColor = color;
}

/**
 * you get true if the point is in shadow
 */
bool
isInShadow(
    vec4 pointInShadow)
{
    float depth;
    float diff;
    float ptDepth; 
    depth = readShadowDepth(pointInShadow);
    ptDepth = pointInShadow.z - 0.005;
    return ptDepth > depth;
}

/**
 * read shadow depth
 */
float
readShadowDepth(
    vec4 pointInShadow)
{
    float result;
    vec4 shadowVec;
    shadowVec = texture2D(uShadowDepthSampler, pointInShadow.xy);
    result = vec4ToFloat(shadowVec);
    return result;
}


/**
 * convert from vector to float
 */
float
vec4ToFloat(
    vec4 coord)
{
    float result;
    result = 0.0;
    for (int i = 0; i < 4; i++) {
        float tmpVal = coord[i];
        tmpVal /= pow(float(0xff), float(i));
        result += tmpVal;
    } 
    return result;
}

/**
 * float to vector4
 */
vec4
floatToVec4(
    float value)
{
    vec4 result;
    vec4 tmpVec;
    float tmpVal; 
    tmpVal = value;
    for (int i = 0; i < 4; i++) {
        tmpVec[i] = tmpVal;
        tmpVal = fract(tmpVal * float(0xff));
    }
    for (int i = 1; i < 2; i++) {
        result[i - 1] = tmpVec[i - 1] - tmpVec[i] / float(0xff);
    }
    result[3] = tmpVec[3];
    return result;
}


// vi: se ts=4 sw=4 et:
