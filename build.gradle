/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

import org.apache.commons.codec.binary.Base64 


plugins {
    id 'java'
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
    id 'com.moowork.node' version '1.3.1'
    id 'com.moowork.gulp' version '1.2.0'
}

ext.web_dir = 'prg'
ext.packageVersion = '0.3.0'
ext.ocSoftEmail0 = 'toshi@oc-soft.net'


repositories { // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

kotlin {
    jvm() {

    }
    js() {
        compilations.main.kotlinOptions {
            moduleKind='amd'
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-js')
             } 
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('test-js')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-js')
                implementation 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.12'
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib') 
            }
        }
    }
    targets.all {
        
    }
}


jsMainClasses.dependsOn gulp_css

task xgetText(type: Exec) {

    executable = 'xgettext'

}


task xgettextphp {
    def srcFiles = fileTree(dir: './',
        include: '**/*.php',
        excludes: ['vendor/**/*.php'])
    def outDir = "${projectDir}/src/i18n" 
    xgetText.workingDir = './'
    xgetText.args += '-p'
    xgetText.args += outDir
    xgetText.args += '--copyright-holder=OC software'
    xgetText.args += '--package-name=Mine sweeper'
    xgetText.args += "--package-version=${packageVersion}"
    xgetText.args += "--msgid-bugs-address=${ocSoftEmail0}" 
    xgetText.args += '-j'
    xgetText.args += '--no-location'
    xgetText.args += srcFiles
    finalizedBy xgetText
    doFirst {
        mkdir(outDir)        
    }

}

task createFigureForDoc(type: JavaExec) {

    def target = kotlin.targets.jvm
    def compilation = target.compilations.main


    classpath = files(compilation.runtimeDependencyFiles,
        compilation.output.allOutputs)
    
    // def target = kotlin.target.jvm
    // classpath = target.compilations.main.runtimeDependencyFiles
    main = 'net.ocsoft.gen.img.SvgKt'
    args = ['-f', 'imgen.json' ]
}

task resolveEllipseCenter(type: JavaExec) {
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main


    classpath = files(compilation.runtimeDependencyFiles,
        compilation.output.allOutputs)
    
    args = ['-f', 'elli-param-1.json' ]
    main = 'net.ocsoft.geom.EllipseCenterKt'

}




createFigureForDoc.description = 'generate figure for document' 
createFigureForDoc.group = 'Documentation'
createFigureForDoc.dependsOn jvmJar

resolveEllipseCenter.description = 'resolve ellipse center from two points on ellipse.'
resolveEllipseCenter.group = 'Calculation'
resolveEllipseCenter.dependsOn jvmJar

build.doLast {
    copy {
        includeEmptyDirs false
        from 'build/classes/kotlin/js/main/' 
        exclude 'mswp/'
        into "${web_dir}"
    }
    copy {
        includeEmptyDirs false
        exclude 'kotlin-test/'
        from 'build/js/packages_imported/'
        into "${web_dir}"
    }
    copy {
        includeEmptyDirs false
        from 'build/processedResources/js/main/'
        into "${web_dir}/mswp"
    }
    copy {
        includeEmptyDirs false
        from 'node_modules/@fortawesome/fontawesome-free/js/fontawesome.js'
        into "${web_dir}/fontawesome-free/js"
    }
    copy {
        includeEmptyDirs false     
        from 'node_modules/@fortawesome/fontawesome-free/js/solid.js'
        into "${web_dir}/fontawesome-free/js"           
    }
}
clean.doFirst {
    delete "${web_dir}/"
    delete "./css"
}
