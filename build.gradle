/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.10'
    id 'net.ocsoft.nodejs' version '0.1'
}

repositories { // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}


ext.siteDir = 'mswp/'
ext.webDir = 'prg/'
ext.webAppPkg = 'mswp/'
ext.packageVersion = '0.4.0'
ext.ocSoftEmail0 = 'toshi@oc-soft.net'
ext.webpackSetting = [
    gradleBuildJs: 'gradle-build.js',
    libraryTarget: 'umd' 
]

ext.webpackSetting.gradleBuildPath =
    new File(new File(projectDir, "webpack.config.d"),
         "_${webpackSetting.gradleBuildJs}")

ext.karmaWebpackSetting = [
    gradleBuildPath: new File(new File(projectDir, "karma.config.d"),
        "_${webpackSetting.gradleBuildJs}")
]

ext.rustBinDir = new File(new File(buildDir, "rust"), "bin")



kotlin {
    jvm {

    }
    js {
        browser {
            webpackTask {
                output.libraryTarget = webpackSetting.libraryTarget
            }
        } 
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-js')
             } 
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('test-js')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-js')

                implementation npm('find-file-up', '2.0.1' )
                implementation npm('html-webpack-plugin', '4.0.2')
                implementation npm('webpack-cdn-plugin', '3.3.1')
                implementation npm('clean-webpack-plugin', '3.0.0')
                implementation npm('mini-css-extract-plugin', '0.9.0')
                implementation npm('css-loader','3.5.2')
                implementation npm('less-loader', '5.0.0')
                implementation npm('null-loader', '4.0.0')
                implementation npm('less', '3.10.3')

                implementation npm('bootstrap', '4.4.1')
                implementation npm('@popperjs/core', '2.2.3')
                implementation npm('webfontloader', '1.6.28')
                implementation npm('jquery', '3.5.0')
                implementation npm('@fortawesome/fontawesome-svg-core',
                    '1.2.28')
                implementation npm('@fortawesome/fontawesome-free', '5.13.0')
                implementation npm('./glrs', 'latest')
                implementation npm('@oc-soft/color-picker', '1.0.20')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib') 
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }
}



kotlin.js {
    browser {
        webpackTask {
            println configFile
            println delegate.class
        }
    }
}

println kotlinNodeJs.installationDir

nodejsSettings {
    installNodeModules = true  
}


tasks.nodeCli_less_lessc_1 {
    def srcFile = new File(projectDir, 'src/jsMain/less/responsive.less')
    def dstFile = new File(projectDir, 'css/responsive.css')
    inputs.file srcFile
    outputs.file dstFile
    args '--no-color', srcFile, dstFile
}


task entryLessCompile {
    dependsOn tasks.nodeCli_less_lessc_1
}


task xgetText(type: Exec) {
    executable = 'xgettext'
}


task webpackGradleBuild {
    doLast {
        def jsName = webpackSetting.gradleBuildJs
        def gradleBuildSrc = new File(new File(projectDir, "tools"), jsName)    

        def commonSourceDir = new File(
            new File(projectDir, "src"), "commonMain") 
        def jsSourceDir = new File(
            new File(projectDir, "src"), "jsMain")
        def jsTestSourceDir = new File(
            new File(projectDir, "src"), "jsTest")

        def binding = [
            config: """{
                |  programDir: '${siteDir}${webDir}',
                |  cssDir: '${siteDir}css',
                |  jsSourceDir: '${jsSourceDir}',
                |  jsTestSourceDir: '${jsTestSourceDir}',
                |  commonSourceDir: '${commonSourceDir}',
                |  projectDir: '${projectDir}',
                |  libraryTarget: '${webpackSetting.libraryTarget}'
                |}""".stripMargin()
        ]
        def tmp = new groovy.text.StreamingTemplateEngine()
        tmp = tmp.createTemplate(gradleBuildSrc) 
        def gradleBuildDestDir = new File(projectDir, "webpack.config.d")    
        def gradleBuildContents = tmp.make(binding)
        webpackSetting.gradleBuildPath.text = gradleBuildContents
        karmaWebpackSetting.gradleBuildPath.text = gradleBuildContents
    }
}

jsBrowserProductionWebpack.inputs.files "src/mswp.ejs"
jsBrowserDevelopmentWebpack.inputs.files "src/mswp.ejs"

jsBrowserProductionWebpack.dependsOn webpackGradleBuild
jsBrowserDevelopmentWebpack.dependsOn webpackGradleBuild


jsBrowserTest.inputs.files files("webpack.conf.d/*.js")


clean.doFirst {
    delete webpackSetting.gradleBuildPath
}

task runMainJvm(type: JavaExec) {
    main = 'net.ocsoft.mswp.EntryKt' 
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main

    classpath += compilation.runtimeDependencyFiles
    classpath += files(jvmJar.archivePath)
}


runMainJvm.dependsOn jvmJar


task xgettextphp {
    def srcFiles = fileTree(dir: './',
        include: '**/*.php',
        excludes: ['vendor/**/*.php'])
    def outDir = "${projectDir}/src/i18n" 
    xgetText.workingDir = './'
    xgetText.args += '-p'
    xgetText.args += outDir
    xgetText.args += '--copyright-holder=OC software'
    xgetText.args += '--package-name=Mine sweeper'
    xgetText.args += "--package-version=${packageVersion}"
    xgetText.args += "--msgid-bugs-address=${ocSoftEmail0}" 
    xgetText.args += '-j'
    xgetText.args += '--no-location'
    xgetText.args += srcFiles
    finalizedBy xgetText
    doFirst {
        mkdir(outDir)        
    }
}

task installWasmBindGen(type: Exec) {
    def cargoBin = new File(new File(System.env.HOME, '.cargo'), 'bin')
    executable = new File(cargoBin, 'cargo')
    args += 'install'
    args += '--root'
    args += new File(buildDir, "rust")
    args += '--git'
    args += 'https://github.com/toshiyuki-rs/wasm-bindgen.git'
    args += 'wasm-bindgen-cli'
}


task buildGlrsLib(type: Exec) {
    executable = 'cargo'
    args += "build"
    args += "--lib"
    args += "--manifest-path"
    args += new File(new File(projectDir, "glrs"), "Cargo.toml")
    args += "--target-dir"
    args += new File(buildDir, "rust")
    args += "--target"
    args += "wasm32-unknown-unknown"
}

task buildGlrsPkg(type: Exec) {
    def pkgname = 'glrs@latest'
    def pkgdir = new File(kotlinNodeJs.rootPackageDir, pkgname)   
    def rustBuildDir = new File(buildDir, "rust")
    def targetDir = new File(rustBuildDir, "wasm32-unknown-unknown")
    def wasmDir = new File(targetDir, "debug")
    def wasmPath = new File(wasmDir, "glrs.wasm")
    executable = new File(rustBinDir, 'wasm-bindgen')
    args += "--out-dir"
    args += pkgdir
    args += "--target"
    args += "web-bundler"
    args += wasmPath

    doLast {
        new File(pkgdir, 'package.json').text = """{
    "name": "glrs",
    "version": "0.1.0",
    "main": "glrs.js", 
    "files": ["glrsd.ts", "glrs_bg.d.ts", "glrs_bg.wasm"]
}
"""
    }
}

buildGlrsPkg.dependsOn buildGlrsLib
buildGlrsPkg.dependsOn installWasmBindGen


task glrsBuild {
    finalizedBy buildGlrsPkg
}

kotlinNpmInstall.dependsOn glrsBuild


task msgfmts {
    def srcDir = file("${projectDir}/src/i18n")
    def targetDir = "${projectDir}/i18n"

    def col = layout.files { srcDir.listFiles() }
    
    col = col.filter { 
        def res = it.name != 'messages.po'
        if (res) {
            res = it.name.endsWith('.po')
        }
        res
    }
     
    doLast {
        col.each { 
            def nameWithExt = it.name
            def name = nameWithExt.substring(0,
                nameWithExt.length() - '.po'.length()) 
            def destDir = new File(new File(targetDir, name), 'LC_MESSAGES')
            mkdir destDir
            def srcPath = it

            exec {
                executable 'msgfmt'
                args += '-o'
                args += new File(destDir, 'messages.mo')
                args += srcPath
            }
        }
    }
}


build.dependsOn msgfmts

task cleanMsgfmts(type: Delete) {
    delete "${projectDir}/i18n"
}
clean.dependsOn cleanMsgfmts

task createFigureForDoc(type: JavaExec) {
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main


    classpath = files(compilation.runtimeDependencyFiles,
        compilation.output.allOutputs)
    
    // def target = kotlin.target.jvm
    // classpath = target.compilations.main.runtimeDependencyFiles
    main = 'net.ocsoft.gen.img.SvgKt'
    args = ['-f', 'imgen.json' ]
}

task resolveEllipseCenter(type: JavaExec) {
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main

    classpath = files(compilation.runtimeDependencyFiles,
        compilation.output.allOutputs)
    
    args = ['-f', 'elli-param-1.json' ]
    main = 'net.ocsoft.geom.EllipseCenterKt'
}


task webpackDeploy(type: Copy) {
    def distDir = null
    distDir = jsBrowserDistributeResources.destinationDir
    if (webAppPkg?.trim()) {
        distDir = new File(distDir, webAppPkg)
    }

    from distDir
    exclude '**/*.php'
    into projectDir
    // todo: you need to have a switch whether development or prduction
    // jsBrowserProductionWebpack.mode
    if (true) {
        // include '**/*.js.map'
    }
}

build.dependsOn entryLessCompile 

jsMainClasses.dependsOn webpackDeploy


task deployResources0(type: Copy) {
    def distDir = jsBrowserDistributeResources.destinationDir
   
    if (webAppPkg?.trim()) {
        distDir = new File(distDir, webAppPkg)
    }

    from jsProcessResources.destinationDir
    into new File(distDir, webDir)
}

webpackDeploy.dependsOn deployResources0

task deployResources1(type: Copy) {
    def distDir = jsBrowserDistributeResources.destinationDir
    def pkgname = 'glrs@latest'
    def src = new File(
        new File(kotlinNodeJs.rootPackageDir, pkgname),
        "glrs_bg.wasm")
    if (webAppPkg?.trim()) {
        distDir = new File(distDir, webAppPkg)
    }

    from  src
    into new File(distDir, webDir)
}

webpackDeploy.dependsOn deployResources1

task cleanWebpackDeploy(type: Delete) {
    delete webDir 
    delete siteDir
    delete new File(projectDir, 'css')
}
clean.dependsOn cleanWebpackDeploy

webpackDeploy.dependsOn cleanWebpackDeploy

task webpackViewDeploy(type: Copy) {
    def distDir = null
    distDir = jsBrowserDistributeResources.destinationDir

    from distDir
    include '*.php'
    into new File(projectDir, 'template')
}



jsMainClasses.dependsOn webpackViewDeploy

task cleanWebpackViewDeploy(type: Delete) {
    delete "${projectDir}/template/entry.php"
}
clean.dependsOn cleanWebpackViewDeploy

//task webpackCssDeploy(type: Copy) {
//    def distDir = null
//    distDir = jsBrowserDistributeResources.destinationDir
//    from distDir
//    include 'css/**/*.css'
//    into projectDir
//}

//task jsDeployResources(type: Copy) {
//    def target = kotlin.targets.js
//    def compilation = target.compilations.main
//
//    includeEmptyDirs false
//    from compilation.output.resourcesDir
//    into "${webDir}/mswp"
//}




// jsMainClasses.dependsOn webpackCssDeploy
// jsMainClasses.dependsOn jsDeployResources

createFigureForDoc.description = 'generate figure for document' 
createFigureForDoc.group = 'Documentation'
createFigureForDoc.dependsOn jvmJar

resolveEllipseCenter.description = 'resolve ellipse center from two points on ellipse.'
resolveEllipseCenter.group = 'Calculation'
resolveEllipseCenter.dependsOn jvmJar

/* vi: se ts=4 sw=4 et: */
