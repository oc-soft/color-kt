/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.70'
}




ext.web_dir = 'prg'
ext.packageVersion = '0.3.0'
ext.ocSoftEmail0 = 'toshi@oc-soft.net'


repositories { // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


kotlin {
    jvm {

    }
    js {
        browser {
            webpackTask {
                output.libraryTarget = 'umd' 
            }
        } 
        compilations.main.kotlinOptions {
            
        }

    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-js')
             } 
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('test-js')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation kotlin('stdlib-js')

                implementation npm('find-file-up', '2.0.1' )
                implementation npm('html-webpack-plugin', '4.0.2')
                implementation npm('webpack-cdn-plugin', '3.3.1')
                implementation npm('clean-webpack-plugin', '3.0.0')
                implementation npm('mini-css-extract-plugin', '0.9.0')
                implementation npm('css-loader','3.5.2')
                implementation npm('less-loader', '5.0.0')

                implementation npm('bootstrap', '4.4.1')
                implementation npm('@popperjs/core', '2.2.3')
                implementation npm('gl-matrix', '3.3.0')
                implementation npm('webfontloader', '1.6.28')
                implementation npm('jquery', '3.5.0')
                implementation npm('@fortawesome/fontawesome-svg-core',
                    '1.2.28')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib') 
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }
    targets.all {
        
    }
}

task xgetText(type: Exec) {
    executable = 'xgettext'
}

task runMainJvm(type: JavaExec) {
    main = 'net.ocsoft.mswp.EntryKt' 
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main

    classpath += compilation.runtimeDependencyFiles
    classpath += files(jvmJar.archivePath)

}

runMainJvm.dependsOn jvmJar


task xgettextphp {
    def srcFiles = fileTree(dir: './',
        include: '**/*.php',
        excludes: ['vendor/**/*.php'])
    def outDir = "${projectDir}/src/i18n" 
    xgetText.workingDir = './'
    xgetText.args += '-p'
    xgetText.args += outDir
    xgetText.args += '--copyright-holder=OC software'
    xgetText.args += '--package-name=Mine sweeper'
    xgetText.args += "--package-version=${packageVersion}"
    xgetText.args += "--msgid-bugs-address=${ocSoftEmail0}" 
    xgetText.args += '-j'
    xgetText.args += '--no-location'
    xgetText.args += srcFiles
    finalizedBy xgetText
    doFirst {
        mkdir(outDir)        
    }

}


task msgfmts {
    def srcDir = file("${projectDir}/src/i18n")
    def targetDir = "${projectDir}/i18n"

    def col = layout.files { srcDir.listFiles() }
    
    col = col.filter { 
        def res = it.name != 'messages.po'
        if (res) {
            res = it.name.endsWith('.po')
        }
        res
    }
     
    doLast {
        col.each { 
            def nameWithExt = it.name
            def name = nameWithExt.substring(0,
                nameWithExt.length() - '.po'.length()) 
            def destDir = new File(new File(targetDir, name), 'LC_MESSAGES')
            mkdir destDir
            def srcPath = it

            exec {
                executable 'msgfmt'
                args += '-o'
                args += new File(destDir, 'messages.mo')
                args += srcPath
            }
        }
    }
}

build.dependsOn msgfmts

task createFigureForDoc(type: JavaExec) {
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main


    classpath = files(compilation.runtimeDependencyFiles,
        compilation.output.allOutputs)
    
    // def target = kotlin.target.jvm
    // classpath = target.compilations.main.runtimeDependencyFiles
    main = 'net.ocsoft.gen.img.SvgKt'
    args = ['-f', 'imgen.json' ]
}

task resolveEllipseCenter(type: JavaExec) {
    def target = kotlin.targets.jvm
    def compilation = target.compilations.main

    classpath = files(compilation.runtimeDependencyFiles,
        compilation.output.allOutputs)
    
    args = ['-f', 'elli-param-1.json' ]
    main = 'net.ocsoft.geom.EllipseCenterKt'
}


task webpackJsDeploy(type: Copy) {
    def distDir = null
    kotlin {
        js {
            browser {
                distribution {
                    distDir =  directory
                }
            } 
        }
    }


    from distDir
    include '**/*.js'
    into projectDir
    // todo: you need to have a switch whether development or prduction
    if (true) {
        include '**/*.js.map'
    }
}

task webpackViewDeploy(type: Copy) {
    def distDir = null
    kotlin {
        js {
            browser {
                distribution {
                    distDir =  directory
                }
            } 
        }
    }
    from distDir
    include '*.php'
    into new File(projectDir, 'template')
}

task webpackCssDeploy(type: Copy) {
    def distDir = null
    kotlin {
        js {
            browser {
                distribution {
                    distDir =  directory
                }
            } 
        }
    }
    from distDir
    include 'css/**/*.css'
    into projectDir
}


jsMainClasses.dependsOn webpackJsDeploy
jsMainClasses.dependsOn webpackViewDeploy
jsMainClasses.dependsOn webpackCssDeploy

createFigureForDoc.description = 'generate figure for document' 
createFigureForDoc.group = 'Documentation'
createFigureForDoc.dependsOn jvmJar

resolveEllipseCenter.description = 'resolve ellipse center from two points on ellipse.'
resolveEllipseCenter.group = 'Calculation'
resolveEllipseCenter.dependsOn jvmJar

build.doLast {
    /*
    copy {
        includeEmptyDirs false
        from 'build/distributions' 
        exclude 'mswp/'
        into "${web_dir}"
    }
    copy {
        includeEmptyDirs false
        exclude 'kotlin-test/'
        from 'build/js/packages_imported/'
        into "${web_dir}"
    }
   */
    copy {
        includeEmptyDirs false
        from 'build/processedResources/js/main/'
        into "${web_dir}/mswp"
    }
    copy {
        includeEmptyDirs false
        from 'node_modules/@fortawesome/fontawesome-free/js/fontawesome.js'
        into "${web_dir}/fontawesome-free/js"
    }
    copy {
        includeEmptyDirs false     
        from 'node_modules/@fortawesome/fontawesome-free/js/solid.js'
        into "${web_dir}/fontawesome-free/js"           
    }
}



clean.doFirst {
    delete "${web_dir}/"
    delete "./css"
    delete "${projectDir}/i18n"
}
/* vi: se ts=4 sw=4 et: */
